import sys
import time
import psutil
from logger import logger
import orig
import orig_failure

# Statistics Class: Sets up the implementation and Calculates and logs performance metrics.
class Stat(process):
    def setup(algo, nacceptors, nreplicas, nleaders, nclients, nops, runs, leader_failure):
        pass

    # gets the performance metrics before algorithm starts
    def start_stats():
        return(time.time(), psutil.cpu_times().user)

    # gets the performance metrics before algorithm ends
    def end_stats(start_time, start_time_c):
        e_time = time.time() - start_time
        c_time = psutil.cpu_times().user - start_time_c
        return('paxos,'+str(nacceptors)+ ',' + str(nops)+ ',' + str(runs) + ',' + str(e_time) + ',' + str(c_time))

    # starts all the processors
    def start_module(acceptors, replicas, leaders, clients):
        start(acceptors)
        start(replicas | leaders)
        start(clients)

    # logs statistics to file
    def write_to_file(stats):
        f = open("paxoslogfile.csv", "a")
        f.write(stats)
        f.close()

    # collect all the memory consumption statistics received from clients and servers
    def collect_memory_stats():
        # create a set of (p, m) values
        procmem = setof((p,m), received(('memory', p, m)))
        procs = setof(p, received(('memory', p, _)))
        total_memory_consumed = 0
        for p in list(procs):
            memset = setof(m, received(('memory', _p, m)))
            mem = 0
            for m in memset:
                mem += m
            # find the average memory consumed by thr process
            avg_mem = mem/len(memset)
            # add to the total memory consumed by current run
            total_memory_consumed += avg_mem
        return (','+ str(total_memory_consumed) + '\n')

    # sets up processes and calls internal methods
    def algorun(module):
        #log to start shiviz: regex
        logger.info(r'(?<host>\S*) (?<clock>{.*})\ (?<event>.*)')
        logger.info('\n')
        #need to add multiple execution delimiter as well
        acceptors = new(module.Acceptor, (), num= nacceptors)
        replicas = new(module.Replica, num= nreplicas)
        leaders = new(module.Leader, (acceptors, replicas), num= nleaders)
        initial_state = [];  setup(replicas, (leaders, initial_state))
        clients = new(module.Client, (replicas, nops), num= nclients)

        start_time, start_time_c = start_stats()

        start_module(acceptors, replicas, leaders, clients)

        # killing a leader once to check the performance of algorithm in case of leader failure
        if leader_failure != 0:
            await(received(('kill_me_now',)))
            proc_list = list(setof(s, received(('kill_me_now',), from_=s)))
            output("################ killing leader", proc_list[0], "################")
            end(proc_list[0])

        # waits for all the clients to be done
        await(each(c in clients, has=received(('done',), from_=c)))
        output('All clients done.')

        # informs all the processes to end
        send(('done',), to= (acceptors|replicas|leaders))

        # collect end time statistics and write to log file
        stats = end_stats(start_time, start_time_c)

        # Collect the total memory consumed by clients and servers
        stats += collect_memory_stats()
        write_to_file(stats)

        send(('done',), to= parent())

    def run():
        output('-------------------',algo,': run',runs,' started---------------------')
        #module = import_da(algo)
        module = orig
        if leader_failure != 0:
            module = orig_failure
        algorun(module)

def main():
    nacceptors = int(sys.argv[1]) if len(sys.argv) > 1 else 5
    nreplicas = int(sys.argv[2]) if len(sys.argv) > 2 else 4
    nleaders = int(sys.argv[3]) if len(sys.argv) > 3 else 2
    nclients = int(sys.argv[4]) if len(sys.argv) > 4 else 3
    nops = int(sys.argv[5]) if len(sys.argv) > 5 else 3
    repetitions = int(sys.argv[6]) if len(sys.argv) > 6 else 8
    leader_failure = int(sys.argv[7]) if len(sys.argv) > 7 else 0 

    module = 'orig'
    if leader_failure != 0:
        module = 'orig_failure'

    # File to log performance statistics for paxos distalgo implementation
    #if nops == 1:
    f = open("paxoslogfile.csv", "w")
    f.write('program,servers,operations,runs,elapsed_time,cpu_time,cpu_memory(kB)\n')
    f.close()
    n = repetitions
        
    # setting up and starting stats process for n repetitions
    while n>0:
        stat_proc = new(Stat, (module, nacceptors, nreplicas, nleaders, nclients, nops, repetitions+1-n, leader_failure), num= 1)
        start(stat_proc)
        await(each(p in stat_proc, has=received(('done',), from_=p)))
        n=n-1
        output('done')
