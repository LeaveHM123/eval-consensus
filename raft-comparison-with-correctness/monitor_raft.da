import sys
import time
import psutil
import raft

# Statistics Class: Sets up the implementation and Calculates and logs performance metrics.
class Stat(process):
    def setup(algo, nservers, nclients, nrequests, maxtimeout, send_failrate, runs):
        pass

    # gets the performance metrics before algorithm starts
    def start_stats():
        return(time.time(), psutil.cpu_times().user)

    # gets the performance metrics before algorithm ends
    def end_stats(start_time, start_time_c):
        e_time = time.time() - start_time
        c_time = psutil.cpu_times().user - start_time_c
        return(str(algo) + ',' + str(nservers) + ',' + str(nrequests) + ',' + str(runs) + ',' + str(e_time) + ',' + str(c_time))

    # starts all the processors
    def start_module(servers, clients, addMonitor):
        start(servers)
        start(clients)
        start(addMonitor)

    # logs statistics to file
    def write_to_file(stats):
        f = open("raftcorrected-logfile.csv", "a")
        f.write(stats)
        f.close()

    # collect all the memory consumption statistics received from clients and servers
    def collect_memory_stats():
    	# create a set of (p, m) values
    	procmem = setof((p,m), received(('memory', p, m)))
    	procs = setof(p, received(('memory', p, _)))
    	total_memory_consumed = 0
    	for p in list(procs):
    		memset = setof(m, received(('memory', _p, m)))
    		mem = 0
    		for m in memset:
    			mem += m
    		# find the average memory consumed by thr process
    		avg_mem = mem/len(memset)
    		# add to the total memory consumed by current run
    		total_memory_consumed += avg_mem
    	return (','+ str(total_memory_consumed) + '\n')

    # sets up processes and calls internal methods
    def algorun(module):
        # setup server and clients
        servers = new(module.Server, num= nservers, send= send_failrate)
        clients = new(module.Client, num= nclients)
        setup(servers, (servers, clients, maxtimeout, True))
        setup(clients, (list(servers), nrequests, maxtimeout))
        addMonitor = new(module.ReconfigServer,(1, servers, clients, send_failrate, maxtimeout))

        # capture start time statistics
        start_time, start_time_c = start_stats()

        # start clients and server for raft
        start_module(servers, clients, addMonitor)

        # end the server processes
        await(some(received(('Reconfiguration'))))
        output("## Reconfiguration response received by Main Thread")
        # Terminate the monitor class
        await(each(c in clients, has=received(('Done',), from_=c)))
        output("All clients done.")
        send(('snap_exit'), to=servers)
        # Terminate the newly added servers
        send(('KillAll'), to= addMonitor)
        end(servers)
        # Wait for the Done signal from the ReconfigServer process
        await(some(received(('DoneMonitor',))))
        end(addMonitor)

        # collect end time statistics and write to log file
        stats = end_stats(start_time, start_time_c)

        # Collect the total memory consumed by clients and servers
        stats += collect_memory_stats()
        write_to_file(stats)

        # inform parent process about termination
        send(('done',), to= parent())

    def run():
        output('-------------------',algo,': run',runs, 'started---------------------')
        module = import_da(algo)
        #module = raft
        algorun(module)

def main():
    nservers = int(sys.argv[1]) if len(sys.argv) > 1 else 5
    nclients = int(sys.argv[2]) if len(sys.argv) > 2 else 3
    nrequests = int(sys.argv[3]) if len(sys.argv) > 3 else 3
    maxtimeout = int(sys.argv[4]) if len(sys.argv) > 4 else 3000
    send_failrate = float(sys.argv[5]) if len(sys.argv) > 5 else 0.0
    repetitions = int(sys.argv[6]) if len(sys.argv) > 6 else 8

    module = 'raft-correctness'

    # File to log performance statistics for raft distalgo implementation
    #if nrequests == 1:
    f = open("raftcorrected-logfile.csv", "w")
    f.write('program,servers,operations,runs,elapsed_time,cpu_time,cpu_memory(kB)\n')
    f.close()

    # setting up and starting stats process for n repetitions
    run = 1
    while run <= nservers:
        stat_proc = new(Stat, (module, nservers, nclients, nrequests, maxtimeout, send_failrate, run), num= 1)
        start(stat_proc)
        await(each(p in stat_proc, has=received(('done',), from_=p)))
        run += 1
        output('done')
