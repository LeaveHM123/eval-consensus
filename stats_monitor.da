import sys
import time
import psutil

class Stat(process):
    def setup(algo, nacceptors, nreplicas, nleaders, nclients, nops, runs):
        pass

    def start_stats():
        return(time.time(), psutil.cpu_times().user, psutil.virtual_memory().used)

    def end_stats(start_time, start_time_c, start_memory):
        e_time = time.time() - start_time
        c_time = psutil.cpu_times().user - start_time_c
        c_memory = psutil.virtual_memory().used - start_memory
        return(str(runs) + ',' + str(e_time) + ',' + str(c_time) +','+ str(c_memory) + '\n')

    def start_module(acceptors, replicas, leaders, clients):
        start(acceptors)
        start(replicas | leaders)
        start(clients)

    def write_to_file(stats):
        f = open("logfile.csv", "a")
        f.write(stats)
        f.close()

    def algorun(module):
        acceptors = new(module.Acceptor, (), num= nacceptors)
        replicas = new(module.Replica, num= nreplicas)
        leaders = new(module.Leader, (acceptors, replicas), num= nleaders)
        initial_state = [];  setup(replicas, (leaders, initial_state))
        clients = new(module.Client, (replicas, nops), num= nclients)

        start_time, start_time_c, start_memory = start_stats()

        start_module(acceptors, replicas, leaders, clients)

        await(each(c in clients, has=received(('done',), from_=c)))
        output('All clients done.')
        send(('done',), to= (acceptors|replicas|leaders))

        stats = end_stats(start_time, start_time_c, start_memory)
        write_to_file(stats)
        send(('done',), to= parent())

    def run():
        output('-------------------',algo,' started---------------------')
        module = import_da(algo)
        algorun(module)

def main():
    nacceptors = int(sys.argv[1]) if len(sys.argv) > 1 else 5
    nreplicas = int(sys.argv[2]) if len(sys.argv) > 2 else 4
    nleaders = int(sys.argv[3]) if len(sys.argv) > 3 else 2
    nclients = int(sys.argv[4]) if len(sys.argv) > 4 else 3
    nops = int(sys.argv[5]) if len(sys.argv) > 5 else 3
    repetitions = int(sys.argv[6]) if len(sys.argv) > 6 else 4

    f = open("logfile.csv", "w")
    f.write('runs,elapsed_time,cpu_time,cpu_memory \n')
    f.close()
    n = repetitions

    while n>0:
        stat_proc = new(Stat, ('orig', nacceptors, nreplicas, nleaders, nclients, nops, 5-n), num= 1)
        start(stat_proc)
        await(each(p in stat_proc, has=received(('done',), from_=p)))
        n=n-1
        output('done')
